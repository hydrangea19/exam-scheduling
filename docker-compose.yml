version: '3.8'

networks:
  exam-scheduler-dev:
    driver: bridge

volumes:
  postgres_data:
  consul_data:
  kafka_data:
  zookeeper_data:

services:

  # POSTGRES
  postgres:
    image: postgres:15.5-alpine
    container_name: exam-scheduler-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: exam_scheduler_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-dev.sql:/docker-entrypoint-initdb.d/init-dev.sql
    networks:
      - exam-scheduler-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d exam_scheduler_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CONSUL
  consul:
    image: consul:1.17.0
    container_name: exam-scheduler-consul-dev
    restart: unless-stopped
    ports:
      - "8500:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
    volumes:
      - consul_data:/consul/data
    networks:
      - exam-scheduler-dev
    command: >
      consul agent 
      -server 
      -bootstrap-expect=1 
      -datacenter=dc1 
      -data-dir=/consul/data 
      -node=consul-dev 
      -bind=0.0.0.0
      -client=0.0.0.0 
      -ui 
      -log-level=INFO
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 3


  # KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: exam-scheduler-zookeeper-dev
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - exam-scheduler-dev
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: exam-scheduler-kafka-dev
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 24
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - exam-scheduler-dev
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 3


  #REDIS
  redis:
    image: redis:7.2.4-alpine
    container_name: exam-scheduler-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - exam-scheduler-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3


  # DEV TOOLS
  pgadmin:
    image: dpage/pgadmin4:8.2
    container_name: exam-scheduler-pgadmin-dev
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@examscheduler.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    networks:
      - exam-scheduler-dev
    depends_on:
      postgres:
        condition: service_healthy

  # KAFKA UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: exam-scheduler-kafka-ui-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - exam-scheduler-dev
    depends_on:
      kafka:
        condition: service_healthy

  # REDIS COMMANDER
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: exam-scheduler-redis-ui-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - exam-scheduler-dev
    depends_on:
      redis:
        condition: service_healthy